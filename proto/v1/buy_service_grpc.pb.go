// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BuyServiceClient is the client API for BuyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyServiceClient interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error)
}

type buyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyServiceClient(cc grpc.ClientConnInterface) BuyServiceClient {
	return &buyServiceClient{cc}
}

func (c *buyServiceClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error) {
	out := new(BuyResponse)
	err := c.cc.Invoke(ctx, "/v1.BuyService/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyServiceServer is the server API for BuyService service.
// All implementations should embed UnimplementedBuyServiceServer
// for forward compatibility
type BuyServiceServer interface {
	Buy(context.Context, *BuyRequest) (*BuyResponse, error)
}

// UnimplementedBuyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBuyServiceServer struct {
}

func (UnimplementedBuyServiceServer) Buy(context.Context, *BuyRequest) (*BuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}

// UnsafeBuyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyServiceServer will
// result in compilation errors.
type UnsafeBuyServiceServer interface {
	mustEmbedUnimplementedBuyServiceServer()
}

func RegisterBuyServiceServer(s grpc.ServiceRegistrar, srv BuyServiceServer) {
	s.RegisterService(&_BuyService_serviceDesc, srv)
}

func _BuyService_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyServiceServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuyService/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyServiceServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BuyService",
	HandlerType: (*BuyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _BuyService_Buy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/buy_service.proto",
}
