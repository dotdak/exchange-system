// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/wager_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateWagerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWagerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWagerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWagerRequestMultiError, or nil if none found.
func (m *CreateWagerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWagerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTotalWagerValue() <= 0 {
		err := CreateWagerRequestValidationError{
			field:  "TotalWagerValue",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOdds() <= 0 {
		err := CreateWagerRequestValidationError{
			field:  "Odds",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSellingPercentage() <= 0 {
		err := CreateWagerRequestValidationError{
			field:  "SellingPercentage",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSellingPrice() <= 0 {
		err := CreateWagerRequestValidationError{
			field:  "SellingPrice",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWagerRequestMultiError(errors)
	}

	return nil
}

// CreateWagerRequestMultiError is an error wrapping multiple validation errors
// returned by CreateWagerRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateWagerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWagerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWagerRequestMultiError) AllErrors() []error { return m }

// CreateWagerRequestValidationError is the validation error returned by
// CreateWagerRequest.Validate if the designated constraints aren't met.
type CreateWagerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWagerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWagerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWagerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWagerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWagerRequestValidationError) ErrorName() string {
	return "CreateWagerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWagerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWagerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWagerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWagerRequestValidationError{}

// Validate checks the field values on CreateWagerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWagerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWagerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWagerResponseMultiError, or nil if none found.
func (m *CreateWagerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWagerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TotalWagerValue

	// no validation rules for Odds

	// no validation rules for SellingPercentage

	// no validation rules for SellingPrice

	// no validation rules for CurrentSellingPrice

	if all {
		switch v := interface{}(m.GetPercentageSold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "PercentageSold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "PercentageSold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPercentageSold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWagerResponseValidationError{
				field:  "PercentageSold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmountSold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "AmountSold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "AmountSold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmountSold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWagerResponseValidationError{
				field:  "AmountSold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "PlacedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWagerResponseValidationError{
					field:  "PlacedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWagerResponseValidationError{
				field:  "PlacedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWagerResponseMultiError(errors)
	}

	return nil
}

// CreateWagerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWagerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWagerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWagerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWagerResponseMultiError) AllErrors() []error { return m }

// CreateWagerResponseValidationError is the validation error returned by
// CreateWagerResponse.Validate if the designated constraints aren't met.
type CreateWagerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWagerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWagerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWagerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWagerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWagerResponseValidationError) ErrorName() string {
	return "CreateWagerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWagerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWagerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWagerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWagerResponseValidationError{}

// Validate checks the field values on ListWagersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWagersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWagersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWagersRequestMultiError, or nil if none found.
func (m *ListWagersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWagersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if m.GetLimit() <= 0 {
		err := ListWagersRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWagersRequestMultiError(errors)
	}

	return nil
}

// ListWagersRequestMultiError is an error wrapping multiple validation errors
// returned by ListWagersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWagersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWagersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWagersRequestMultiError) AllErrors() []error { return m }

// ListWagersRequestValidationError is the validation error returned by
// ListWagersRequest.Validate if the designated constraints aren't met.
type ListWagersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWagersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWagersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWagersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWagersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWagersRequestValidationError) ErrorName() string {
	return "ListWagersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWagersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWagersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWagersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWagersRequestValidationError{}
