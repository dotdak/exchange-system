syntax="proto3";

package v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/dotdak/exchange-system/proto;v1";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  schemes: HTTPS;
};

service WagerService {
  rpc CreateWager(CreateWagerRequest) returns (CreateWagerResponse) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/wagers
      post: "/wagers"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a wager"
      description: "Create a wager to the server."
      tags: "Wagers"
    };
  }
  rpc ListWagers(ListWagersRequest) returns (google.protobuf.ListValue) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/wagers
      get: "/wagers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List wagers"
      description: "List all wagers on the server."
      tags: "Wagers"
    };
  }
}

message CreateWagerRequest {
  uint32 total_wager_value = 1 [(validate.rules).uint32.gt = 0];
  uint32 odds = 2 [(validate.rules).uint32.gt = 0];
  uint32 selling_percentage = 3 [(validate.rules).uint32.gt = 0];
  double selling_price = 4 [(validate.rules).double.gt = 0];
}

message CreateWagerResponse {
  uint32 id = 1;
  uint32 total_wager_value = 2 ;
  uint32 odds = 3;
  uint32 selling_percentage = 4;
  double selling_price = 5;
  double current_selling_price = 6;
  uint32 percentage_sold = 7;
  double amount_sold = 8;
  google.protobuf.Timestamp placed_at = 9;
}

message ListWagersRequest {
  uint32 page = 1;
  uint32 limit = 2 [(validate.rules).uint32.gt = 0];
}

