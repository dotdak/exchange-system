// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wagger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WagerServiceClient is the client API for WagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WagerServiceClient interface {
	AddWager(ctx context.Context, in *AddWagerRequest, opts ...grpc.CallOption) (*Wager, error)
	ListWagers(ctx context.Context, in *ListWagersRequest, opts ...grpc.CallOption) (WagerService_ListWagersClient, error)
}

type wagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWagerServiceClient(cc grpc.ClientConnInterface) WagerServiceClient {
	return &wagerServiceClient{cc}
}

func (c *wagerServiceClient) AddWager(ctx context.Context, in *AddWagerRequest, opts ...grpc.CallOption) (*Wager, error) {
	out := new(Wager)
	err := c.cc.Invoke(ctx, "/example.WagerService/AddWager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wagerServiceClient) ListWagers(ctx context.Context, in *ListWagersRequest, opts ...grpc.CallOption) (WagerService_ListWagersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WagerService_serviceDesc.Streams[0], "/example.WagerService/ListWagers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wagerServiceListWagersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WagerService_ListWagersClient interface {
	Recv() (*Wager, error)
	grpc.ClientStream
}

type wagerServiceListWagersClient struct {
	grpc.ClientStream
}

func (x *wagerServiceListWagersClient) Recv() (*Wager, error) {
	m := new(Wager)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WagerServiceServer is the server API for WagerService service.
// All implementations should embed UnimplementedWagerServiceServer
// for forward compatibility
type WagerServiceServer interface {
	AddWager(context.Context, *AddWagerRequest) (*Wager, error)
	ListWagers(*ListWagersRequest, WagerService_ListWagersServer) error
}

// UnimplementedWagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWagerServiceServer struct {
}

func (UnimplementedWagerServiceServer) AddWager(context.Context, *AddWagerRequest) (*Wager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWager not implemented")
}
func (UnimplementedWagerServiceServer) ListWagers(*ListWagersRequest, WagerService_ListWagersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWagers not implemented")
}

// UnsafeWagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WagerServiceServer will
// result in compilation errors.
type UnsafeWagerServiceServer interface {
	mustEmbedUnimplementedWagerServiceServer()
}

func RegisterWagerServiceServer(s grpc.ServiceRegistrar, srv WagerServiceServer) {
	s.RegisterService(&_WagerService_serviceDesc, srv)
}

func _WagerService_AddWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WagerServiceServer).AddWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.WagerService/AddWager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WagerServiceServer).AddWager(ctx, req.(*AddWagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WagerService_ListWagers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWagersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WagerServiceServer).ListWagers(m, &wagerServiceListWagersServer{stream})
}

type WagerService_ListWagersServer interface {
	Send(*Wager) error
	grpc.ServerStream
}

type wagerServiceListWagersServer struct {
	grpc.ServerStream
}

func (x *wagerServiceListWagersServer) Send(m *Wager) error {
	return x.ServerStream.SendMsg(m)
}

var _WagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.WagerService",
	HandlerType: (*WagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWager",
			Handler:    _WagerService_AddWager_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListWagers",
			Handler:       _WagerService_ListWagers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/wagger.proto",
}
