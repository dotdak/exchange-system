// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/wagger_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WagerService_CreateWager_FullMethodName = "/v1.WagerService/CreateWager"
	WagerService_ListWagers_FullMethodName  = "/v1.WagerService/ListWagers"
)

// WagerServiceClient is the client API for WagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WagerServiceClient interface {
	CreateWager(ctx context.Context, in *CreateWagerRequest, opts ...grpc.CallOption) (*CreateWagerResponse, error)
	ListWagers(ctx context.Context, in *ListWagersRequest, opts ...grpc.CallOption) (*structpb.ListValue, error)
}

type wagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWagerServiceClient(cc grpc.ClientConnInterface) WagerServiceClient {
	return &wagerServiceClient{cc}
}

func (c *wagerServiceClient) CreateWager(ctx context.Context, in *CreateWagerRequest, opts ...grpc.CallOption) (*CreateWagerResponse, error) {
	out := new(CreateWagerResponse)
	err := c.cc.Invoke(ctx, WagerService_CreateWager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wagerServiceClient) ListWagers(ctx context.Context, in *ListWagersRequest, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, WagerService_ListWagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WagerServiceServer is the server API for WagerService service.
// All implementations should embed UnimplementedWagerServiceServer
// for forward compatibility
type WagerServiceServer interface {
	CreateWager(context.Context, *CreateWagerRequest) (*CreateWagerResponse, error)
	ListWagers(context.Context, *ListWagersRequest) (*structpb.ListValue, error)
}

// UnimplementedWagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWagerServiceServer struct {
}

func (UnimplementedWagerServiceServer) CreateWager(context.Context, *CreateWagerRequest) (*CreateWagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWager not implemented")
}
func (UnimplementedWagerServiceServer) ListWagers(context.Context, *ListWagersRequest) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWagers not implemented")
}

// UnsafeWagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WagerServiceServer will
// result in compilation errors.
type UnsafeWagerServiceServer interface {
	mustEmbedUnimplementedWagerServiceServer()
}

func RegisterWagerServiceServer(s grpc.ServiceRegistrar, srv WagerServiceServer) {
	s.RegisterService(&WagerService_ServiceDesc, srv)
}

func _WagerService_CreateWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WagerServiceServer).CreateWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WagerService_CreateWager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WagerServiceServer).CreateWager(ctx, req.(*CreateWagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WagerService_ListWagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WagerServiceServer).ListWagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WagerService_ListWagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WagerServiceServer).ListWagers(ctx, req.(*ListWagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WagerService_ServiceDesc is the grpc.ServiceDesc for WagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WagerService",
	HandlerType: (*WagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWager",
			Handler:    _WagerService_CreateWager_Handler,
		},
		{
			MethodName: "ListWagers",
			Handler:    _WagerService_ListWagers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/wagger_service.proto",
}
